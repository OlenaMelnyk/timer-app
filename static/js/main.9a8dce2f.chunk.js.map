{"version":3,"sources":["components/Controls/Controls.jsx","App.js","index.js"],"names":["Controls","status","start","reset","wait","className","onClick","App","useState","seconds","setSeconds","setStatus","lastClick","setLastClick","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","Date","toISOString","slice","e","timeStamp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAIaA,EAAW,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAE/C,OACE,sBAAKC,UAAU,WAAf,UACE,wBAAQA,UAAU,SAASC,QAASJ,EAApC,SACc,YAAXD,EAAuB,QAAU,SAEpC,wBAAQI,UAAU,SAASC,QAASH,EAApC,mBACA,wBAAQE,UAAU,SAASC,QAASF,EAApC,sB,MCLS,SAASG,IACtB,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,WAArC,mBAAOP,EAAP,KAAeU,EAAf,KACA,EAAkCH,mBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAUzB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,YAAXnB,GACFS,GAAW,SAAAW,GAAG,OAAIA,EAAM,UAIvB,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAACtB,IA4BJ,OACE,qBAAKI,UAAU,YAAf,SACE,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,iBAAf,cAAkC,IAAImB,KAAKf,GAASgB,cAAcC,MAAM,GAAI,OAC7E,cAAC,EAAD,CAAUzB,OAASA,EAAQC,MA9Bb,WACF,YAAXD,GACFU,EAAU,WACVD,EAAW,IAEXC,EAAU,YAyBqCR,MArBrC,WACZO,EAAW,GACXC,EAAU,YAmBqDP,KAhBpD,SAACuB,GACRf,EAAY,IACDe,EAAEC,UAAYhB,EAEhB,KACTD,EAAU,YAIdE,EAAac,EAAEC,mB,MC9CnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9a8dce2f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Controls.scss';\n\nexport const Controls = ({ status, start, reset, wait }) => {\n\n  return (\n    <div className='Controls'>\n      <button className='button' onClick={start}>\n        {status !== 'running' ? 'Start' : 'Stop'}\n      </button>\n      <button className='button' onClick={reset}>Reset</button>\n      <button className='button' onClick={wait}>Wait</button>\n    </div>\n  )\n};\n\nControls.propTypes = {\n  status: PropTypes.string.isRequired,\n  start: PropTypes.func.isRequired,\n  reset: PropTypes.func.isRequired,\n  wait: PropTypes.func.isRequired,\n}","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Controls } from './components/Controls';\nimport './App.scss';\n\nexport default function App() {\n  const [seconds, setSeconds] = useState(0);\n  const [status, setStatus] = useState('stopped');\n  const [lastClick, setLastClick] = useState(0);\n \n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (status === 'running') {\n          setSeconds(val => val + 1000);\n        }\n      });\n\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [status]);\n \n  const start_stop = () => {\n    if (status === 'running') {\n      setStatus('stopped');\n      setSeconds(0);\n    } else {\n      setStatus('running');\n    }\n  };\n \n  const reset = () => {\n    setSeconds(0);\n    setStatus('running');\n  };\n  \n  const wait = (e) => {\n    if (lastClick > 0) {\n      const diff = e.timeStamp - lastClick;\n\n      if (diff < 300) {\n        setStatus('waiting');\n      }\n    }\n\n    setLastClick(e.timeStamp);    \n  };\n \n  return (\n    <div className=\"container\">\n      <div className=\"card timer\">\n        <div className=\"timer__tabloid\"> {new Date(seconds).toISOString().slice(11, 19)}</div>\n       <Controls status ={status} start={start_stop} reset={reset} wait={wait}/>\n      </div>\n    </div>\n  );\n}\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}